const mongoose = require('mongoose');
require('dotenv').config();

// Connexion √† MongoDB
mongoose.connect(process.env.MONGO_URI || 'mongodb://localhost:27017/learnup', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

const Student = require('./models/Student');
const Note = require('./models/Note');
const Absence = require('./models/Absence');
const Course = require('./models/Course');
const Teacher = require('./models/Teacher');

async function testStudentRoutes() {
  try {
    console.log('üîç Test des routes √©tudiant...\n');

    // 1. V√©rifier si un √©tudiant existe
    const student = await Student.findOne({ email: 'khalil@gmail.com' });
    if (!student) {
      console.log('‚ùå Aucun √©tudiant trouv√© avec khalil@gmail.com');
      console.log('üìù Cr√©ation d\'un √©tudiant de test...');
      
      const testStudent = new Student({
        name: 'Test Student',
        email: 'test@gmail.com',
        password: 'password123',
        classe: '6√®me A',
        role: 'student'
      });
      await testStudent.save();
      console.log('‚úÖ √âtudiant de test cr√©√©:', testStudent._id);
    } else {
      console.log('‚úÖ √âtudiant trouv√©:', student._id);
    }

    // 2. V√©rifier les notes
    console.log('\nüìä Test des notes...');
    const notes = await Note.find({ etudiant: student?._id || 'test' });
    console.log(`üìù Nombre de notes trouv√©es: ${notes.length}`);
    
    if (notes.length === 0) {
      console.log('‚ö†Ô∏è  Aucune note trouv√©e - cr√©ation de notes de test...');
      
      // Cr√©er un cours de test
      const course = await Course.findOne() || new Course({
        nom: 'Math√©matiques',
        description: 'Cours de math√©matiques',
        classe: '6√®me A'
      });
      await course.save();
      
      // Cr√©er un prof de test
      const teacher = await Teacher.findOne() || new Teacher({
        name: 'Prof Test',
        email: 'prof@test.com',
        password: 'password123',
        matiere: 'Math√©matiques',
        role: 'teacher'
      });
      await teacher.save();
      
      // Cr√©er des notes de test
      const testNotes = [
        {
          etudiant: student?._id || 'test',
          cours: course._id,
          devoir: 'DS1',
          note: 15,
          enseignant: teacher._id
        },
        {
          etudiant: student?._id || 'test',
          cours: course._id,
          devoir: 'DM1',
          note: 18,
          enseignant: teacher._id
        }
      ];
      
      for (const noteData of testNotes) {
        const note = new Note(noteData);
        await note.save();
        console.log('‚úÖ Note cr√©√©e:', note.devoir, '-', note.note + '/20');
      }
    }

    // 3. V√©rifier les absences
    console.log('\nüìÖ Test des absences...');
    const absences = await Absence.find({ student: student?._id || 'test' });
    console.log(`‚è∞ Nombre d'absences trouv√©es: ${absences.length}`);
    
    if (absences.length === 0) {
      console.log('‚ö†Ô∏è  Aucune absence trouv√©e - cr√©ation d\'absences de test...');
      
      const course = await Course.findOne();
      if (course) {
        const testAbsences = [
          {
            student: student?._id || 'test',
            course: course._id,
            date: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) // Il y a 7 jours
          },
          {
            student: student?._id || 'test',
            course: course._id,
            date: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000) // Il y a 3 jours
          }
        ];
        
        for (const absenceData of testAbsences) {
          const absence = new Absence(absenceData);
          await absence.save();
          console.log('‚úÖ Absence cr√©√©e:', absence.date.toLocaleDateString());
        }
      }
    }

    console.log('\nüéâ Test termin√© !');
    console.log('üìã R√©sum√©:');
    console.log(`   - √âtudiant: ${student ? 'Trouv√©' : 'Cr√©√©'}`);
    console.log(`   - Notes: ${notes.length} existantes`);
    console.log(`   - Absences: ${absences.length} existantes`);

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  } finally {
    mongoose.connection.close();
  }
}

testStudentRoutes(); 