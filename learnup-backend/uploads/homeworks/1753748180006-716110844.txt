// ‚úÖ MesCours.jsx corrig√©
import React, { useState, useEffect } from "react";
import {
  BookOpen,
  CalendarDays,
  Clock,
  Users2,
  MessageSquare,
  HelpCircle,
  User2,
  FileText,
  ExternalLink,
} from "lucide-react";
import { useNavigate } from "react-router-dom";

export default function MesCours() {
  const navigate = useNavigate();
  const [coursData, setCoursData] = useState([]);
  const [loading, setLoading] = useState(true);
  const [selectedCourseId, setSelectedCourseId] = useState(null);
  const [selectedCourses, setSelectedCourses] = useState([]);

  const userInfo = JSON.parse(localStorage.getItem("userInfo"));
  const token = userInfo?.token;
  const userRole = userInfo?.role;

  const authHeaders = {
    "Content-Type": "application/json",
    Authorization: `Bearer ${token}`,
  };

  const fetchCourses = async () => {
    try {
      const res = await fetch(`/api/courses?search=&page=1&limit=10`, {
        headers: authHeaders,
      });
      const data = await res.json();
      if (!res.ok) throw new Error(data.message || "Erreur API");
      setCoursData(data.courses || []);
    } catch (err) {
      console.error("‚ùå Erreur lors du chargement :", err.message);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchCourses();
  }, [token]);

  const handleDeleteCourse = async (id) => {
    if (!window.confirm("Supprimer ce cours ?")) return;
    try {
      const res = await fetch(`/api/courses/${id}`, {
        method: "DELETE",
        headers: authHeaders,
      });
      if (!res.ok) throw new Error("Erreur suppression");
      setCoursData((prev) => prev.filter((c) => c._id !== id));
    } catch (err) {
      alert(err.message);
    }
  };

  const toggleCourseSelection = (id) => {
    setSelectedCourses((prev) =>
      prev.includes(id) ? prev.filter((c) => c !== id) : [...prev, id]
    );
  };

  const handleDeleteSelected = async () => {
    if (!window.confirm("Supprimer les cours s√©lectionn√©s ?")) return;
    try {
      const res = await fetch("/api/courses/delete-selected", {
        method: "POST",
        headers: authHeaders,
        body: JSON.stringify({ ids: selectedCourses }),
      });
      if (!res.ok) throw new Error("Erreur suppression multiple");
      setCoursData((prev) =>
        prev.filter((c) => !selectedCourses.includes(c._id))
      );
      setSelectedCourses([]);
    } catch (err) {
      alert(err.message);
    }
  };

  const handleAddCourse = async () => {
    if (userRole !== "teacher") return alert("Seul un enseignant peut ajouter un cours.");

    const classe = prompt("Classe ?");
    const semestre = prompt("Semestre ?");
    const horaire = prompt("Horaire (ex: 14h) ?");
    const dateStr = prompt("Date (YYYY-MM-DD) ?");

    if (!classe || !semestre || !horaire || !dateStr) return;

    try {
      const date = new Date(dateStr);
      if (isNaN(date.getTime())) throw new Error("Date invalide");

      const res = await fetch("/api/courses", {
        method: "POST",
        headers: authHeaders,
        body: JSON.stringify({ classe, semestre, horaire, date }),
      });

      const data = await res.json();
      if (!res.ok) throw new Error(data.message);
      setCoursData((prev) => [...prev, data]);
    } catch (err) {
      alert("Erreur ajout cours : " + err.message);
    }
  };

  const handleTeacherEnroll = async (courseId) => {
    const email = prompt("Email de l'√©tudiant √† inscrire ?");
    if (!email) return;
    try {
      const res = await fetch(`/api/courses/enroll/${courseId}`, {
        method: "POST",
        headers: authHeaders,
        body: JSON.stringify({ studentEmail: email }),
      });

      const data = await res.json();
      if (!res.ok) throw new Error(data.message);
      alert("√âtudiant inscrit avec succ√®s ‚úÖ");
      fetchCourses();
    } catch (err) {
      alert("Erreur inscription : " + err.message);
    }
  };

  if (loading) {
    return <div className="text-center mt-10">Chargement des cours...</div>;
  }

  return (
    <div className="min-h-screen bg-gray-100 py-10 px-6 sm:px-10">
      <div className="max-w-7xl mx-auto">
        <h1 className="text-4xl font-bold text-blue-800 mb-10 flex items-center gap-3">
          <BookOpen size={36} /> Mes Cours
        </h1>

        <div className="flex justify-between items-center mb-6">
          {userRole === "teacher" && (
            <button
              onClick={handleAddCourse}
              className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
            >
              + Ajouter un cours
            </button>
          )}

          {selectedCourses.length > 0 && (
            <button
              onClick={handleDeleteSelected}
              className="bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700"
            >
              Supprimer les cours s√©lectionn√©s ({selectedCourses.length})
            </button>
          )}
        </div>

        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
          {coursData.map((cours) => (
            <div
              key={cours._id}
              onClick={() =>
                setSelectedCourseId(
                  cours._id === selectedCourseId ? null : cours._id
                )
              }
              className={`relative bg-white rounded-xl border p-6 shadow hover:shadow-lg transition cursor-pointer`}
            >
              <input
                type="checkbox"
                className="absolute top-4 right-4"
                checked={selectedCourses.includes(cours._id)}
                onChange={() => toggleCourseSelection(cours._id)}
                onClick={(e) => e.stopPropagation()}
              />

              <p className="text-xl font-bold text-blue-700 mb-2">
                {cours.classe || "Classe inconnue"}
              </p>

              <p className="text-sm text-gray-600 mb-1">
                <Users2 size={16} className="inline mr-1 text-blue-500" />
                <strong>Semestre :</strong> {cours.semestre || "‚Äî"}
              </p>

              <p className="text-sm text-gray-600 mb-1">
                <Clock size={16} className="inline mr-1 text-blue-500" />
                <strong>Horaire :</strong> {cours.horaire}
              </p>

              <p className="text-sm text-gray-600 mb-1">
                <CalendarDays size={16} className="inline mr-1 text-blue-500" />
                <strong>Date :</strong> {new Date(cours.date).toLocaleDateString()}
              </p>

              {cours.teacher && (
                <p className="text-sm text-gray-600 mb-2">
                  <User2 size={16} className="inline mr-1 text-blue-500" />
                  <strong>Prof :</strong> {cours.teacher.name} ({cours.teacher.email})
                </p>
              )}

              <div className="flex flex-wrap gap-3 mt-4">
                <button
                  className="text-sm text-green-600 hover:underline"
                  onClick={(e) => {
                    e.stopPropagation();
                    navigate(`/forum/${cours._id}`);
                  }}
                >
                  <MessageSquare size={14} className="inline" /> Forum
                </button>

                <button
                  className="text-sm text-yellow-600 hover:underline"
                  onClick={(e) => {
                    e.stopPropagation();
                    navigate(`/quiz/${cours._id}`);
                  }}
                >
                  <HelpCircle size={14} className="inline" /> Quiz
                </button>

                <button
                  className="text-sm text-blue-600 hover:underline"
                  onClick={(e) => {
                    e.stopPropagation();
                    navigate(`/prof/cours/${cours._id}/documents`);
                  }}
                >
                  <FileText size={14} className="inline" /> Cours
                </button>
              </div>

              {selectedCourseId === cours._id && (
                <div className="mt-6 p-4 border-t border-gray-200 bg-gray-50 rounded">
                  <h4 className="font-semibold text-blue-800 mb-2">üë®‚Äçüéì √âtudiants inscrits :</h4>
                  {cours.etudiants?.length > 0 ? (
                    <ul className="list-disc list-inside ml-4 space-y-1 text-sm text-gray-700">
                      {cours.etudiants.map((e) => (
                        <li key={e._id}>
                          <span className="font-medium">{e.name}</span> ({e.email})
                        </li>
                      ))}
                    </ul>
                  ) : (
                    <p className="text-gray-500 italic">Aucun √©tudiant inscrit.</p>
                  )}

                  {cours.documents?.length > 0 && (
                    <div className="mt-6">
                      <h4 className="font-semibold text-blue-800 mb-2">üìÇ Documents li√©s :</h4>
                      <ul className="space-y-1 text-sm text-gray-700 ml-4">
                        {cours.documents.map((doc) => (
                          <li key={doc._id} className="flex justify-between items-center">
                            <span className="flex items-center gap-2">
                              <FileText size={14} /> {doc.fileName}
                            </span>
                            <a
                              href={doc.fileUrl}
                              target="_blank"
                              rel="noopener noreferrer"
                              className="text-blue-600 hover:underline"
                            >
                              <ExternalLink size={14} />
                            </a>
                          </li>
                        ))}
                      </ul>
                    </div>
                  )}

                  {userRole === "teacher" && (
                    <div className="mt-6 flex gap-3">
                      <button
                        onClick={() => handleTeacherEnroll(cours._id)}
                        className="bg-blue-600 text-white px-3 py-1 rounded hover:bg-blue-700 text-sm"
                      >
                        + Inscrire un √©tudiant
                      </button>

                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          handleDeleteCourse(cours._id);
                        }}
                        className="text-red-600 text-sm hover:underline"
                      >
                        Supprimer ce cours
                      </button>
                    </div>
                  )}
                </div>
              )}
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}
