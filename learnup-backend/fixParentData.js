const mongoose = require('mongoose');
const Parent = require('./models/Parent');

// Connexion √† MongoDB
mongoose.connect('mongodb://localhost:27017/learnup', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

async function fixParentData() {
  try {
    console.log('üîÑ V√©rification et correction des donn√©es des parents...');

    // R√©cup√©rer tous les parents
    const parents = await Parent.find({});
    console.log(`‚úÖ ${parents.length} parents trouv√©s`);

    for (const parent of parents) {
      console.log(`\nüîç V√©rification du parent: ${parent._id}`);
      console.log('Donn√©es actuelles:', {
        nom: parent.nom,
        prenom: parent.prenom,
        email: parent.email,
        telephone: parent.telephone,
        adresse: parent.adresse,
        enfants: parent.enfants,
        status: parent.status,
        derniereConnexion: parent.derniereConnexion
      });

      let updated = false;

      // Corriger le nom si n√©cessaire
      if (!parent.nom && !parent.prenom) {
        parent.nom = 'Nom';
        parent.prenom = 'Non d√©fini';
        updated = true;
        console.log('‚úÖ Nom corrig√©');
      }

      // Corriger les enfants si n√©cessaire
      if (!parent.enfants || parent.enfants.length === 0) {
        parent.enfants = ['Enfant non d√©fini'];
        updated = true;
        console.log('‚úÖ Enfants corrig√©s');
      }

      // Corriger la derni√®re connexion si n√©cessaire
      if (!parent.derniereConnexion) {
        parent.derniereConnexion = new Date();
        updated = true;
        console.log('‚úÖ Derni√®re connexion corrig√©e');
      }

      // Corriger le statut si n√©cessaire
      if (!parent.status) {
        parent.status = 'active';
        updated = true;
        console.log('‚úÖ Statut corrig√©');
      }

      // Sauvegarder si des modifications ont √©t√© apport√©es
      if (updated) {
        await parent.save();
        console.log('‚úÖ Parent mis √† jour');
      } else {
        console.log('‚úÖ Aucune correction n√©cessaire');
      }
    }

    console.log('\n‚úÖ V√©rification termin√©e !');
    
    // Afficher un exemple de parent format√©
    const testParent = parents[0];
    if (testParent) {
      console.log('\nüìã Exemple de parent format√©:');
      const formattedParent = {
        _id: testParent._id,
        name: testParent.nom && testParent.prenom ? `${testParent.nom} ${testParent.prenom}` : 
              testParent.nom || testParent.prenom || 'Nom non d√©fini',
        email: testParent.email || 'email@non.defini',
        tel: testParent.telephone || 'Non renseign√©',
        adresse: testParent.adresse || 'Adresse non renseign√©e',
        children: Array.isArray(testParent.enfants) ? testParent.enfants : 
                 typeof testParent.enfants === 'string' ? testParent.enfants.split(',').map(c => c.trim()) : 
                 ['Enfant non d√©fini'],
        status: testParent.status || 'active',
        derniereConnexion: testParent.derniereConnexion
      };
      console.log(JSON.stringify(formattedParent, null, 2));
    }

  } catch (error) {
    console.error('‚ùå Erreur:', error);
  } finally {
    mongoose.connection.close();
  }
}

fixParentData(); 