const jwt = require("jsonwebtoken");
const Student = require("../models/Student");
const Teacher = require("../models/Teacher");
const Admin = require("../models/Admin");
const Parent = require("../models/Parent");

const roleModelMap = {
  student: Student,
  teacher: Teacher,
  admin: Admin,
  parent: Parent,
};

const protect = async (req, res, next) => {
  try {
    const authHeader = req.headers.authorization;
    if (!authHeader || !authHeader.startsWith("Bearer ")) {
      return res.status(401).json({ message: "Non autoris√© : token manquant." });
    }

    const token = authHeader.split(" ")[1];
    
    // Token de test pour le d√©veloppement
    if (token === 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NTk5YzY5YzY5YzY5YzY5YzY5YzY5YyIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTcwNDY5NzIwMCwiZXhwIjoxNzA0NzgzNjAwfQ.example') {
      console.log('üîß Token de test d√©tect√© - Bypass d\'authentification pour le d√©veloppement');
      req.user = {
        _id: '507f1f77bcf86cd799439011',
        role: 'admin',
        nom: 'Admin',
        prenom: 'Test'
      };
      return next();
    }
    
    const decoded = jwt.verify(token, process.env.JWT_SECRET);

    // S√©curit√© : v√©rifie que le r√¥le est bien pr√©sent dans le token
    if (!decoded.role) {
      console.error('‚ùå Token invalide : r√¥le manquant');
      return res.status(403).json({ message: "Token invalide : r√¥le utilisateur manquant." });
    }

    const id = decoded._id || decoded.id || decoded.userId;
    const role = decoded.role.toLowerCase();

    console.log('üîç Token d√©cod√©:', { id, role });

    const Model = roleModelMap[role];
    if (!Model) {
      console.log('‚ùå R√¥le invalide:', role);
      return res.status(403).json({ message: "R√¥le utilisateur invalide." });
    }

    const user = await Model.findById(id).select("-password");
    if (!user) {
      console.log('‚ùå Utilisateur non trouv√©:', { id, role, Model: Model.modelName });
      return res.status(401).json({ message: "Utilisateur introuvable." });
    }

    user.role = role;
    req.user = user;
    console.log('‚úÖ Utilisateur authentifi√©:', { id: user._id, role: user.role, name: user.name });

    next();
  } catch (error) {
    console.error('‚ùå Erreur d\'authentification:', error.message);
    return res.status(401).json({ message: "Token invalide ou expir√©." });
  }
};

const authorizeRoles = (...allowedRoles) => {
  return (req, res, next) => {
    if (!req.user || !allowedRoles.includes(req.user.role)) {
      console.warn('‚õî Acc√®s refus√© :', {
        userRole: req.user?.role,
        allowed: allowedRoles
      });
      return res.status(403).json({ message: "Acc√®s refus√© : r√¥le insuffisant." });
    }
    next();
  };
};

// Middleware sp√©cifique pour les admins
const admin = (req, res, next) => {
  if (!req.user || req.user.role !== 'admin') {
    return res.status(403).json({ message: "Acc√®s refus√© : droits administrateur requis." });
  }
  next();
};

// Middleware sp√©cifique pour les professeurs
const teacher = (req, res, next) => {
  if (!req.user || req.user.role !== 'teacher') {
    return res.status(403).json({ message: "Acc√®s refus√© : droits professeur requis." });
  }
  next();
};

// Middleware sp√©cifique pour les √©tudiants
const student = (req, res, next) => {
  if (!req.user || req.user.role !== 'student') {
    return res.status(403).json({ message: "Acc√®s refus√© : droits √©tudiant requis." });
  }
  next();
};

// Middleware sp√©cifique pour les parents
const parent = (req, res, next) => {
  if (!req.user || req.user.role !== 'parent') {
    return res.status(403).json({ message: "Acc√®s refus√© : droits parent requis." });
  }
  next();
};

module.exports = {
  protect,
  authorizeRoles,
  admin,
  teacher,
  student,
  parent,
};
